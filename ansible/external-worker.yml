---

- hosts: localhost
  connection: local
  become: yes

  vars:
    # See telegraf inputs for more plugings https://github.com/influxdata/telegraf/tree/master/plugins/inputs
    # Like https://github.com/influxdata/telegraf/tree/master/plugins/inputs/net_response for tcp port checks
    telegraf_plugins_extra:
      linux_sysctl_fs:
      conntrack:

  vars_files:
    - "default.yml"
    - [ "{{ env }}-worker.yml", "empty.yml" ]

  pre_tasks:

    - name: Found local disk
      find:
        paths: /dev
        file_type: any
        patterns: "local0,xvdg"
      register: dev_files
      when: use_local_device|bool == true
      tags:
       - notforbuild

    - name: Set local device name
      set_fact:
        var_lib_docker_device: "{{ dev_files.files[0].path }}"
      no_log: True
      when: use_local_device|bool == true and dev_files.files
      tags:
       - notforbuild

    # Symlink are defined for nvme and systemd mount doesnt accept it
    - name: Get the real name of device, not symlink
      shell: "readlink -f {{ var_lib_docker_device }}"
      register: real_device
      tags:
       - notforbuild

    - name: Set real name of device
      set_fact:
        var_lib_docker_device: "{{ real_device.stdout }}"
      tags:
       - notforbuild

  roles:
    - {role: cycloid.telegraf, tags: telegraf}
    - {role: geerlingguy.docker, tags: docker}
    - role: transferwise.ebs-automatic-nvme-mapping
      tags:
        - nvme

    # Create var-lib-docker.mount
    - role: cycloid.systemd
      systemd_type: mount
      systemd_mount_type: btrfs
      systemd_mount_device: "{{var_lib_docker_device}}"
      systemd_mount_mountpoint: /var/lib/docker
      tags:
       - notforbuild

    - role: cycloid.systemd
      systemd_type: dropin
      systemd_dropin_service_name: "docker"
      systemd_dropin_name: storage
      systemd_dropin_priority: "01"
      systemd_dropin_content:
        - "[Unit]"
        - "After=var-lib-docker.mount"
        - "Requires=var-lib-docker.mount"
      tags:
       - notforbuild

    - role: cycloid.systemd
      systemd_type: dropin
      systemd_dropin_service_name: "concourse-worker"
      systemd_dropin_name: storage
      systemd_dropin_priority: "01"
      systemd_dropin_content:
        - "[Unit]"
        - "After=var-lib-docker.mount"
        - "Requires=var-lib-docker.mount"
      tags:
       - notforbuild

    - role: cycloid.concourse
      tags:
        - concourse
    - {role: cycloid.fluentd, tags: fluentd}

  tasks:
    # jq used by user-data to send cloudformation signal
    - name: Install jq for user-data signal
      apt:
        name: jq
        state: present

    # Configure docker storage as btrfs. (Better performance for concourse using also baggage claim BTRFS
    - name: Install btrfs-tools for docker storage
      apt:
        name: btrfs-tools
        state: present

    - name: override the default docker storage
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "storage-driver": "btrfs",
            "storage-opts": [
              "btrfs.min_space=2G"
            ]
          }

    - name: Adding sysctl config
      lineinfile:
        path: /etc/sysctl.d/99-net.conf
        regexp: "^{{ item.name }}="
        line: "{{ item.name }}={{ item.value }}"
        owner: root
        create: yes
        group: root
        mode: 0644
      with_items: "{{ sysctl_configs }}"

    # Ensure docker use the good mounted fs and cleanned
    - name: Stop service docker
      systemd:
        name: docker
        state: stopped
      tags:
       - notforbuild

    - name: Clean /var/lib/docker
      file:
        state: absent
        path: "/var/lib/docker"
      tags:
       - notforbuild

    - name: Create /var/lib/docker
      file:
        path: /var/lib/docker
        state: directory
        owner: root
        group: root
        mode: 0711
      tags:
       - notforbuild

    - name: Start service docker
      systemd:
        name: docker
        state: started
      tags:
       - notforbuild

    # Ensure worker is started and configured at first boot
    - name: configure worker service | concourse
      service:
        name: concourse-worker
        enabled: yes
      tags:
       - notforbuild
    - name: restart concourse worker
      service:
        name: concourse-worker
        state: restarted
        enabled: yes
      tags:
       - notforbuild
